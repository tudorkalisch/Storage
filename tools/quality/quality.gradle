apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

def configDir = "${project.rootDir}/tools/quality"
def reportsDir = "${project.buildDir}/reports"

task checkstyle(type: Checkstyle) {
    ignoreFailures = false
    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("$configDir/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task findbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$configDir/findbugs/findbugs.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            setDestination(new File("$reportsDir/findbugs/findbugs.xml"))
        }
        html {
            setDestination(new File("$reportsDir/findbugs/findbugs.html"))
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {
    ignoreFailures = false
    ruleSetFiles = files("$configDir/pmd/pmd.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            setDestination(new File("$reportsDir/pmd/pmd.xml"))
        }
        html {
            setDestination(new File("$reportsDir/pmd/pmd.html"))
        }
    }
}

android {
    lintOptions {
        abortOnError true
        xmlReport true
        htmlReport true
        lintConfig file("$configDir/lint/lint.xml")
        htmlOutput file("$reportsDir/lint/lint-result.html")
        xmlOutput file("$reportsDir/lint/lint-result.xml")
    }
}

task checkLint {
//    Dependencies are added when specific lint tasks are created. See below
}

tasks.whenTaskAdded { task ->
    if (task.name.equalsIgnoreCase('lintStaging') || task.name.equalsIgnoreCase('lintMyElectroluxStaging')) {
        checkLint.dependsOn task
    }
}
